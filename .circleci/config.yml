# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

jobs:
  build:
    docker:
      - image: maven:3-amazoncorretto-17-al2023
    steps:
      - checkout
      - run:
          name: "build code"
          command: |
            mvn clean install -DskipTests

  unit-test:
    docker:
      - image: maven:3-amazoncorretto-17-al2023
    steps:
      - checkout
      - run:
          name: "build code"
          command: |
            mvn test

  push-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
      - run:
          name: Build docker image
          command: |
            docker build  -t huynhduy1420021/devops-project-5:${CIRCLE_WORKFLOW_ID:0:7} .
      - deploy:
          name: Push Docker image 
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD            
            docker push "huynhduy1420021/devops-project-5:${CIRCLE_WORKFLOW_ID:0:7}"

  create-eksCluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH
            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            mv /tmp/eksctl /usr/local/bin
      - run: 
          name: Create new cluster
          command: |
            if eksctl get cluster  --name "my-cluster1" --region=us-east-1
            then
              echo "Cluster already exist"
            else
              eksctl create cluster --name "my-cluster1" --region=us-east-1 --zones=us-east-1a,us-east-1b
            fi

  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Config kubectl to cluster
          command: |
            aws eks update-kubeconfig --region us-east-1  --name my-cluster
      - run:
          name: Deploy application
          command: |
            kubectl create deploy devops-project-5-${CIRCLE_WORKFLOW_ID:0:7} --image="huynhduy1420021/devops-project-5:${CIRCLE_WORKFLOW_ID:0:7}" --port 8080
      - run:
          name: Expose application
          command: |
            kubectl expose deploy devops-project-5-${CIRCLE_WORKFLOW_ID:0:7} --type=LoadBalancer --port=8080
            sleep 1m

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Config kubectl to cluster
          command: |
            aws eks update-kubeconfig --region us-east-1  --name my-cluster
      - run:
          name: test
          command: |
            APP_IP=$(kubectl get services devops-project-5-${CIRCLE_WORKFLOW_ID:0:7} --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            export APP_ENDPOINT="http://${APP_IP}/ping"
            echo ${APP_ENDPOINT} 
            

            if curl ${APP_ENDPOINT} | grep "Pong"
            then
              return 0
            else
              return 1
            fi
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Config kubectl connect to aws
          command: |
            aws eks update-kubeconfig --region us-east-1  --name udacity-devops-project-final
      - run:
          name: Clean old service
          command: |
            kubectl get services | grep devops-project-5 > tmp-services.txt
            sed 's/ .*//' tmp-services.txt > services.txt 
            SERVICE=devops-project-5:${CIRCLE_WORKFLOW_ID:0:7}
            kubectl delete service $(cat  services.txt| sed 's/'$SERVICE'//g' | sed -r '/^\s*$/d')

workflows:
  say-hello-workflow:
    jobs:
      - build
      - unit-test:
          requires: [build]
      - push-image:
          requires: [unit-test]
      - create-eksCluster:
          requires: [push-image]
      - deploy: 
          requires: [create-eksCluster]
      - smoke-test: 
          requires: [deploy]
      - cleanup: 
          requires: [deploy]